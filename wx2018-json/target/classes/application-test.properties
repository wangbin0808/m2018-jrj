###server 
server.port=8991
server.undertow.io-threads=4
server.undertow.worker-threads=100
server.undertow.buffer-size=1024
server.undertow.buffers-per-region=22
server.undertow.direct-buffers=true
#UNDERTOW
#访问日志目录。
server.undertow.accesslog.dir=e:\\logs\\wx2018-json
#启用访问日志。
server.undertow.accesslog.enabled=true
#访问日志的格式模式。
server.undertow.accesslog.pattern=common
#日志文件名前缀。
server.undertow.accesslog.prefix=wx2018-json
#启用访问日志轮换。
server.undertow.accesslog.rotate=true
#日志文件名后缀。
server.undertow.accesslog.suffix=.log
#设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
server.undertow.io-threads=4
#HTTP帖子内容的最大大小（以字节为单位）。
#server.undertow.max-http-post-size = 0
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
server.undertow.worker-threads=200
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小（以字节为单位）,越小的空间被利用越充分
#server.undertow.buffer-size=1024
# 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
#server.undertow.buffers-per-region=1024
# 是否分配的直接内存
server.undertow.direct-buffers=true

#MYBATIS
#扫描类型处理器包路径，多个包用 ,或者;或者\t\n 分割
#mybatis.type-handlers-package=com.example.typehandler
#mybatis基本属性配置文件位置
#mybatis.config-location=classpath:mybatis/mybatis-config.xml
#mybatis启动时是否检查基本属性配置文件
mybatis.check-config-location=false
#mybatis 配置执行器类型 SIMPLE 执行器执行其它语句。REUSE 执行器可能重复使用prepared statements 语句，BATCH执行器可以重复执行语句和批量更新。
#mybatis.executor-type=simple

#mybatis基本配置集
mybatis.configuration-properties.cacheEnabled=true
#延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。
mybatis.configuration-properties.lazyLoadingEnabled=fase
#设置超时时间，它决定驱动等待数据库响应的秒数。
mybatis.configuration-properties.defaultStatementTimeout=50
#指定 MyBatis 所用日志的具体实现，未指定时将自动查找。
mybatis.configuration-properties.logImpl=STDOUT_LOGGING

#数据库
spring.datasource.url=jdbc:mysql://172.16.20.103:3307/wx_sjb?characterEncoding=UTF8&amp&useSSL=true&zeroDateTimeBehavior=convertToNull
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.username=JRJ_wx_sjb_w
spring.datasource.password=2fJ2jY5xwaMroZsssI
#DRUID
spring.datasource.type = com.alibaba.druid.pool.DruidDataSource
# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize = 5 
spring.datasource.minIdle = 10
spring.datasource.maxActive = 100
 # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters = stat
#配置获取连接等待超时的时间
spring.datasource.maxWait = 60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis = 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis = 300000
#用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
spring.datasource.validationQuery = SELECT 1
spring.datasource.testWhileIdle = true
spring.datasource.testOnBorrow = false
spring.datasource.testOnReturn = false
#通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.poolPreparedStatements = true
#指定连接池的缓存大小
spring.datasource.maxOpenPreparedStatements = 20


###Encoding 
spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true

###Log  
#logging.config=
logging.level.root=INFO 
logging.file=E:\\logs\\wx-logs.log
logging.level.org.springframework.web=DEBUG
logging.level.com.jrj.wx.json.controller=DEBUG
logging.level.java.sql=DEBUG
logging.level.com.jrj.wx.json.dao=DEBUG

