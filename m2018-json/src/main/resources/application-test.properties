
#UNDERTOW
#访问日志目录。
server.undertow.accesslog.dir=/data/logs/undertow/
#启用访问日志。
server.undertow.accesslog.enabled=true
#访问日志的格式模式。
server.undertow.accesslog.pattern=common
#日志文件名前缀。
server.undertow.accesslog.prefix=m2018_json
#启用访问日志轮换。
server.undertow.accesslog.rotate=true
#日志文件名后缀。
server.undertow.accesslog.suffix=log
#设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
server.undertow.io-threads=4
#HTTP帖子内容的最大大小（以字节为单位）。
#server.undertow.max-http-post-size = 0
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
server.undertow.worker-threads=200
# 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
# 每块buffer的空间大小（以字节为单位）,越小的空间被利用越充分
#server.undertow.buffer-size=1024
# 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
#server.undertow.buffers-per-region=1024
# 是否分配的直接内存
server.undertow.direct-buffers=true

#MYBATIS
#mybatis启动时是否检查基本属性配置文件
mybatis.check-config-location=false
#mybatis 配置执行器类型 SIMPLE 执行器执行其它语句。REUSE 执行器可能重复使用prepared statements 语句，BATCH执行器可以重复执行语句和批量更新。
#mybatis.executor-type=simple

#mybatis基本配置集
mybatis.configuration-properties.cacheEnabled=true
#延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。
mybatis.configuration-properties.lazyLoadingEnabled=fase
#设置超时时间，它决定驱动等待数据库响应的秒数。
mybatis.configuration-properties.defaultStatementTimeout=50
#指定 MyBatis 所用日志的具体实现，未指定时将自动查找。
mybatis.configuration-properties.logImpl=STDOUT_LOGGING

#DRUID
druid.datasource.maxActive=100
#初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
druid.datasource.initialSize=5
#最小连接池数量
druid.datasource.minIdle=10
#获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
druid.datasource.maxWait=60000
#有两个含义：1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
druid.datasource.timeBetweenEvictionRunsMillis=60000
#Destory线程中如果检测到当前连接的最后活跃时间和当前时间的差值大于minEvictableIdleTimeMillis，则关闭当前连接。
druid.datasource.minEvictableIdleTimeMillis=300000
#用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
druid.datasource.validationQuery=SELECT 1 FROM DUAL
#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。建议配置为true，不影响性能，并且保证安全性。
druid.datasource.testWhileIdle=true
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
druid.datasource.testOnBorrow=false
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
druid.datasource.testOnReturn=false
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。
#在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。
#作者在5.5版本中使用PSCache，通过监控界面发现PSCache有缓存命中率记录，该应该是支持PSCache。
druid.datasource.poolPreparedStatements=false
#指定每个连接上PSCache的大小
druid.datasource.maxPoolPreparedStatementPerConnectionSize=20
#监控统计用的stat  日志用的log4j  防御sql注入的wall
druid.datasource.filters=stat,log4j
# \u901a\u8fc7connectProperties\u5c5e\u6027\u6765\u6253\u5f00mergeSql\u529f\u80fd\uff1b\u6162SQL\u8bb0\u5f55
#druid.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
druid.datasource.connectionProperties=druid.stat.slowSqlMillis=5000

#datasource
#datasource
spring.datasource.cms.url=jdbc:sqlserver://dbs02.1433.jrjc.local:1433;databaseName=BJ_JRJCMS
spring.datasource.cms.username=JRJ_MPSite_ReadOnly
spring.datasource.cms.password=OtW18uNZQuUXoQi6Se0S
spring.datasource.cms.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver

spring.datasource.pg.url=jdbc:sqlserver://dbs01.1433.jrjc.local:1433;databaseName=PGenius
spring.datasource.pg.username=JRJ_Mobile_ReadOnly
spring.datasource.pg.password=qQQ7pJtHmFK3QSKNFV8K
spring.datasource.pg.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver


#REDIS(连接相关属性移到profile里)
#在集群中执行命令时要重定向的最大数量。
#spring.redis.cluster.max-redirects =
#连接工厂使用的数据库索引。
#spring.redis.database = 0
#启用SSL支持。
spring.redis.ssl = false
#连接超时（以毫秒为单位）。
#spring.redis.timeout = 3000
spring.redis.clusterNodes=172.16.196.70:7000,172.16.196.70:7001,172.16.196.70:7002,172.16.196.70:7003,172.16.196.70:7004,172.16.196.70:7005,172.16.196.70:7006,172.16.196.70:7007,172.16.196.70:7008,172.16.196.70:7009
spring.redis.connectionTimeout=6000
spring.redis.soTimeout=2000
spring.redis.maxAttempts=10

#使用jedis连接池相关配置
#在给定时间池可以分配的最大连接数。使用负值为无限制。
spring.redis.jedis.pool.max-active=8
#池中“空闲”连接的最大数量。使用负值来指示无限数量的空闲连接。
spring.redis.jedis.pool.max-idle=8
#连接分配在池耗尽时抛出异常之前应阻止的最大时间（以毫秒为单位）。使用负值无限期地阻止。
spring.redis.jedis.pool.max-wait=5000
#在池中维护的最小空闲连接数目标。此设置只有在正值时才有效果。
spring.redis.jedis.pool.min-idle=0


#MONGODB 多数据源
#mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database.collection][?options]]
spring.data.mongodb.newswr.uri=mongodb://m_news_wr_user:12345@172.16.196.59:7777,172.16.196.59:8888,172.16.196.59:9999/news
spring.data.mongodb.newsr.uri=mongodb://m_news_r_user:123@172.16.196.59:7777,172.16.196.59:8888,172.16.196.59:9999/news
spring.data.mongodb.taskwr.uri=mongodb://m_task_wr_user:12345@172.16.196.59:7777,172.16.196.59:8888,172.16.196.59:9999/task
spring.data.mongodb.taskr.uri=mongodb://m_task_r_user:123@172.16.196.59:7777,172.16.196.59:8888,172.16.196.59:9999/task

#custom properties
custom.redis.key_base=jrj:m:json:
custom.redis.cache_second=60

#启用shutdown
endpoints.shutdown.enabled=true
#禁用密码验证
endpoints.shutdown.sensitive=false


# SERVER
server.port=8081

#用于查看spring boot 的自动装配信息
#debug=true

#LOG
logging.level.org.springframework.web=DEBUG
logging.level.cn.com.jrj.m=DEBUG
logging.level.java.sql=DEBUG
logging.file.max-size=50M
logging.file.max-history=30
logging.file=/data/logs/m2018-json/m-json.log
